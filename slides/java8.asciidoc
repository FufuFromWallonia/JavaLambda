:source-highlighter: coderay
:revealjs_transition: fade
:revealjs_theme: solarized
:revealjs_history: true
:revealjs_center: false

= Java 8, la version avant Java 9 ;)
Partiellement inspiré par NinjaSquad :)

== !

Qui utilise *Java5* ?

== !

Qui utilise *Java6* ?

== !

Qui utilise *Java7* ?

== !

[quote, No one - ever]
____
Java7 a changé ma façon de développer!
____

[NOTE.speaker]
--
Qu'y a-t-il eu de nouveau dans Java 7?
Quelques APIs: nio2, quelques ajouts dans concurrency, JDBC 4.1...
Mais au quotidien, qu'est-ce qui a changé?
--

== LA METHODE FOREACH

== foreach() 1/2

.Traversal avec un Iterator
[source,java,indent=0]
----
include::../code/src/main/java/java8/foreach/TraversalExample.java[tag=traversalIterator]
----

== foreach() 2/2

.Traversal avec la méthode foreach()
[source,java,indent=0]
----
include::../code/src/main/java/java8/foreach/TraversalExample.java[tag=traversalForeach]
----

== LES DEFAULT METHODS

== Augmenter une interface

.Comportements par défaut
[source,java,indent=0]
----
include::../code/src/main/java/java8/defmethod/DefaultMethodExample.java[tag=orderableDefaultMethods]
----

== Implémenter l'interface

.Bénéficier des comportements par défaut
[source,java,indent=0]
----
include::../code/src/main/java/java8/defmethod/DefaultMethodExample.java[tag=orderableImplemented]
----

== Vérifier le comportement

.Orderable in action
[source,java,indent=0]
----
include::../code/src/main/java/java8/defmethod/DefaultMethodExample.java[tag=orderableInAction]
----

== LES (EXPRESSIONS) LAMBDAS

== Comparator 1/2

.Comparator avec une classe anonyme
[source,java,indent=0]
----
include::../code/src/main/java/java8/lambda/ComparatorExample.java[tag=comparatorAnonymous]
----

== Comparator 2/2

.Comparator avec une expression lambda
[source,java,indent=0]
----
include::../code/src/main/java/java8/lambda/ComparatorExample.java[tag=comparatorLambda]
----

== Runnable 1/2

.Runnable avec une classe anonyme
[source,java,indent=0]
----
include::../code/src/main/java/java8/lambda/RunnableExample.java[tag=runnableAnonymous]
----

== Runnable 2/2

.Runnable avec une expression lambda
[source,java,indent=0]
----
include::../code/src/main/java/java8/lambda/RunnableExample.java[tag=runnableLambda]
----

== Magique

Toute *interface* avec *une seule méthode* peut être utilisée comme expression lambda.

== Souvenez-vous: foreach() 2/2

.Traversal avec la méthode foreach()
[source,java,indent=0]
----
include::../code/src/main/java/java8/foreach/TraversalExample.java[tag=traversalForeach]
----

== Souvenez-vous: foreach() 2/2

.Traversal avec la méthode foreach()
[source,java,indent=0]
----
include::../code/src/main/java/java8/foreach/TraversalExample.java[tag=traversalForeach]
----
Consumer est une *interface* avec *une seule méthode*, une @FunctionalInterface.

== foreach() + Lambda

.Traversal avec la méthode foreach() et une expression Lambda
[source,java,indent=0]
----
include::../code/src/main/java/java8/foreach/TraversalExample.java[tag=traversalForeachLambda]
----
